run
	| topazFileHeader projectSetDefinition sparkleRepositoryRoot gsSrcRoot topazFileNameMap 
		projectSetModification visitor |

	topazFileHeader := '! Copyright (C) GemTalk Systems 1986-', Date today year printString, '.  All Rights Reserved.
'.
	projectSetDefinition := RwProjectSetDefinition new.
	sparkleRepositoryRoot := '$ROWAN_PROJECTS_HOME/Sparkle' asFileReference.
	gsSrcRoot := sparkleRepositoryRoot / 'src-gs'.
	topazFileNameMap := Dictionary new.

	{
		{
			sparkleRepositoryRoot.
			'Sparkle.ston'.
		}.
		{
			'$ROWAN_PROJECTS_HOME/RemoteServiceReplication' asFileReference.
			'RemoteServiceReplication.ston'.
		}.
		{
			'$ROWAN_PROJECTS_HOME/Announcements' asFileReference.
			'Announcements.ston'.
		}
	} do: [:ar |
		| gsSrcRoot repositoryRoot specUrl loadSpec resolvedProject specFileName |

		repositoryRoot := ar at: 1.
		specFileName := ar at: 2.

		specUrl := repositoryRoot / 'rowan' / 'specs' / specFileName.
		(loadSpec := RwSpecification fromUrl: 'file:' , specUrl pathString)
			projectsHome: repositoryRoot;
			diskUrl: 'file:' , repositoryRoot pathString;
			yourself.

		resolvedProject := loadSpec resolve.	"reads project from disk"

		projectSetDefinition
			addDefinition: resolvedProject;
			yourself.

		(topazFileNameMap 
			at: 'bootstrapSparkle' ifAbsentPut: [ {} ])
				addAll: resolvedProject packageNames.

		].

	projectSetModification := projectSetDefinition
		compareAgainstBase: RwProjectSetDefinition new.

	visitor := RwGsModificationTopazWriterVisitorV2 new
		repositoryRootPath: gsSrcRoot;
		topazFilenamePackageNamesMap: topazFileNameMap;
		topazFileHeader: topazFileHeader;
		yourself.
	visitor visit: projectSetModification.

%
