How to load and run Sparkle as of 2020-12-28

The parts of Sparkle that are working as of this moment (primarily the inspector) are able to run in GemStone 3.6.0. Once the debugger starts becoming functional, GemStone 3.6.1 will be required. These instructions assume a GemStone 3.6.0 server on Linux, and a Pharo 9 client on Windows.

----

Prerequisites: 
 * A running GemStone 3.6.0 stone that you can experiment on
 * A recent Windows VM and image for 64-bit Pharo 9. These instructions were written using image build 999 and a 90-x64 VM (not a 90-x64-headless VM) that appears to have been built on 2020-10-13.
 
1) Get the software from GitHub
  On *both* the Windows machine and the Linux machine:
    * Create or choose a directory for Git clones, and set the environment variable ROWAN_PROJECTS_HOME to point at that directory.
    * Clone https://github.com/GemTalk/RemoteServiceReplication.git to $ROWAN_PROJECTS_HOME/RemoteServiceReplication
    * Clone https://github.com/GemTalk/Sparkle.git to $ROWAN_PROJECTS_HOME/Sparkle
  In both cases, you will be on the default branch named "development."
  You will use the Windows clone to load into Pharo, and the Linux clone to load into GemStone.
  
2) Install to Pharo
  Lauch Pharo 9, making sure that ROWAN_PROJECTS_HOME is defined in the environment from which the VM is launched.
  In Pharo:
    * In the system settings browser, choose an Appearance --> UserInterfaceTheme of "Pharo Dark." Use with the light theme is not recommended at this time, as Sparkle is not yet themed and some colors make things hard to read in the light theme.
    * Open Iceberg
      * In the Iceberg repositories list, click Add.
      * Choose "Import from existing clone."
      * Click the folder icon to open a file selection dialog.
      * Choose %ROWAN_PROJECTS_HOME%\Sparkle and click OK.
      * Click OK in the "Import from existing clone" dialog. Sparkle should appear in the Iceberg repository list.
      * Right-click on Sparkle in that list, and choose Metacello->Install baseline of Sparkle (default).
    Sparkle will load the RemoteServiceReplication and Sparkle packages.
    * Save the image.

3) Install to GemStone
  In a shell which has $GEMSTONE configured for the stone you want to use, and which has $GEMSTONE/bin in its PATH:
  * cd $ROWAN_PROJECTS_HOME/Sparkle/src-gs
  * Edit loginSystemUser.topaz to have the correct stone name and SystemUser password
  * ./bootstrapSparkle.sh
  The result of the "errorcount" at the end of the output should be 0.
  
4) Launch a gem that will listen for a connection from Pharo
  **Warning** This step will launch a gem that will listen for a connection on port 29299. At present, there is *no* security on that port, and the gem must log in as SystemUser (this restriction should not be there, and is being worked on).
  * ./server.sh
  You should see a "Starting to listen" message.
  
5) Connect from Pharo
  The Sparkle GUI launcher is under development, so for now you can launch from a Playground script. The following Playground script has three independent parts. Part 1 initiates a connection and stores the connection object in a playground variable. Part 2 opens a Sparkle explorer window on the connection, and can be used repeatedly on the same connection. Part 3 closes the connection, or any open connections.
  You must edit part 1 to use the correct hostname or IP address for the gem. Once the connection is established by part 1, the gem will no longer be listening, so no further connections on port 29299 can be made until you run the server.sh script on the gem's machine again. When you have evaluated one of the expressions in part 3, you should see a "Connection closed" message in your Linux shell.
  
  "1"
    | spec |
    spec := RsrInitiateConnection host: 'GemHostName' port: 29299.
    connection := spec connect. "Connection is left undeclared so it will become a workspace variable."

  "2"
    | taskspace |
    taskspace := SparkleTaskspace new.
    taskspace
        connection: connection;
        openNewDefaultTaskspace.
        
  "3"
    connection close.
    "Or to be sure all connections are closed:"
    RsrConnection allInstancesDo: [ :each | each close ].
    
---
